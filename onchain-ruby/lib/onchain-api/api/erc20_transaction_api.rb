=begin
#OnChain Crypto Currency API

#Swagger definition for this API is available at https://io/docs/swagger.json

OpenAPI spec version: 1.0
Contact: support@io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module OnchainApi
  class ERC20TransactionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [EthereumTransactionReply]
    def create_transaction(body, opts = {})
      data, _status_code, _headers = create_transaction_with_http_info(body, opts)
      data
    end

    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EthereumTransactionReply, Fixnum, Hash)>] EthereumTransactionReply data, response status code and response headers
    def create_transaction_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ERC20TransactionApi.create_transaction ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ERC20TransactionApi.create_transaction"
      end
      # resource path
      local_var_path = '/api/erc20/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EthereumTransactionReply')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ERC20TransactionApi#create_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TransactionSendReply]
    def sign_and_send(body, opts = {})
      data, _status_code, _headers = sign_and_send_with_http_info(body, opts)
      data
    end

    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionSendReply, Fixnum, Hash)>] TransactionSendReply data, response status code and response headers
    def sign_and_send_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ERC20TransactionApi.sign_and_send ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ERC20TransactionApi.sign_and_send"
      end
      # resource path
      local_var_path = '/api/erc20/sign_and_send'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionSendReply')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ERC20TransactionApi#sign_and_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
