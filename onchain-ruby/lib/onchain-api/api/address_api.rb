=begin
#OnChain Crypto Currency API

#Swagger definition for this API is available at https://io/docs/swagger.json

The version of the OpenAPI document: 1.0
Contact: support@io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-beta

=end

require 'cgi'

module OnchainApi
  class AddressApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Balance
    # Returns the satoshi balance, usd balance and user viewable balance for an address. For ERC20 tokens you need to pass in the contract ID and the number of decimal places.
    # @param coin_type [String] 
    # @param address [String] The public address to lookup
    # @param [Hash] opts the optional parameters
    # @return [BalanceReply]
    def get_balance(coin_type, address, opts = {})
      data, _status_code, _headers = get_balance_with_http_info(coin_type, address, opts)
      data
    end

    # Get Balance
    # Returns the satoshi balance, usd balance and user viewable balance for an address. For ERC20 tokens you need to pass in the contract ID and the number of decimal places.
    # @param coin_type [String] 
    # @param address [String] The public address to lookup
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalanceReply, Integer, Hash)>] BalanceReply data, response status code and response headers
    def get_balance_with_http_info(coin_type, address, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.get_balance ...'
      end
      # verify the required parameter 'coin_type' is set
      if @api_client.config.client_side_validation && coin_type.nil?
        fail ArgumentError, "Missing the required parameter 'coin_type' when calling AddressApi.get_balance"
      end
      # verify enum value
      allowable_values = ["BITCOIN", "ETHEREUM", "TESTNET3", "BITCOIN_CASH", "BITCOIN_GOLD", "LITECOIN", "DASH", "DOGE", "BITCOIN_PRIVATE", "ZCASH", "ZCASH_TESTNET", "ZCLASSIC"]
      if @api_client.config.client_side_validation && !allowable_values.include?(coin_type)
        fail ArgumentError, "invalid value for \"coin_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling AddressApi.get_balance"
      end
      # resource path
      local_var_path = '/api/address/balance/{coin_type}/{address}'.sub('{' + 'coin_type' + '}', CGI.escape(coin_type.to_s)).sub('{' + 'address' + '}', CGI.escape(address.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BalanceReply' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Balances
    # Returns the satoshi balance, usd balance and user viewable balance for a set of addresses.
    # @param coin_type [String] 
    # @param addresses [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [BalancesReply]
    def get_balances(coin_type, addresses, opts = {})
      data, _status_code, _headers = get_balances_with_http_info(coin_type, addresses, opts)
      data
    end

    # Get Balances
    # Returns the satoshi balance, usd balance and user viewable balance for a set of addresses.
    # @param coin_type [String] 
    # @param addresses [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BalancesReply, Integer, Hash)>] BalancesReply data, response status code and response headers
    def get_balances_with_http_info(coin_type, addresses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.get_balances ...'
      end
      # verify the required parameter 'coin_type' is set
      if @api_client.config.client_side_validation && coin_type.nil?
        fail ArgumentError, "Missing the required parameter 'coin_type' when calling AddressApi.get_balances"
      end
      # verify enum value
      allowable_values = ["BITCOIN", "ETHEREUM", "TESTNET3", "BITCOIN_CASH", "BITCOIN_GOLD", "LITECOIN", "DASH", "DOGE", "BITCOIN_PRIVATE", "ZCASH", "ZCASH_TESTNET", "ZCLASSIC"]
      if @api_client.config.client_side_validation && !allowable_values.include?(coin_type)
        fail ArgumentError, "invalid value for \"coin_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'addresses' is set
      if @api_client.config.client_side_validation && addresses.nil?
        fail ArgumentError, "Missing the required parameter 'addresses' when calling AddressApi.get_balances"
      end
      if @api_client.config.client_side_validation && addresses.length < 1
        fail ArgumentError, 'invalid value for "addresses" when calling AddressApi.get_balances, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/address/balances/{coin_type}/{addresses}'.sub('{' + 'coin_type' + '}', CGI.escape(coin_type.to_s)).sub('{' + 'addresses' + '}', CGI.escape(addresses.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BalancesReply' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get History
    # Returns the transaction history for an address or addresses.
    # @param coin_type [String] 
    # @param addresses [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [HistoryReply]
    def get_history(coin_type, addresses, opts = {})
      data, _status_code, _headers = get_history_with_http_info(coin_type, addresses, opts)
      data
    end

    # Get History
    # Returns the transaction history for an address or addresses.
    # @param coin_type [String] 
    # @param addresses [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HistoryReply, Integer, Hash)>] HistoryReply data, response status code and response headers
    def get_history_with_http_info(coin_type, addresses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.get_history ...'
      end
      # verify the required parameter 'coin_type' is set
      if @api_client.config.client_side_validation && coin_type.nil?
        fail ArgumentError, "Missing the required parameter 'coin_type' when calling AddressApi.get_history"
      end
      # verify enum value
      allowable_values = ["BITCOIN", "ETHEREUM", "TESTNET3", "BITCOIN_CASH", "BITCOIN_GOLD", "LITECOIN", "DASH", "DOGE", "BITCOIN_PRIVATE", "ZCASH", "ZCASH_TESTNET", "ZCLASSIC"]
      if @api_client.config.client_side_validation && !allowable_values.include?(coin_type)
        fail ArgumentError, "invalid value for \"coin_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'addresses' is set
      if @api_client.config.client_side_validation && addresses.nil?
        fail ArgumentError, "Missing the required parameter 'addresses' when calling AddressApi.get_history"
      end
      if @api_client.config.client_side_validation && addresses.length < 1
        fail ArgumentError, 'invalid value for "addresses" when calling AddressApi.get_history, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/address/history/{coin_type}/{addresses}'.sub('{' + 'coin_type' + '}', CGI.escape(coin_type.to_s)).sub('{' + 'addresses' + '}', CGI.escape(addresses.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'HistoryReply' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param coin_type [String] 
    # @param public_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [AddressReply]
    def get_network_address(coin_type, public_key, opts = {})
      data, _status_code, _headers = get_network_address_with_http_info(coin_type, public_key, opts)
      data
    end

    # @param coin_type [String] 
    # @param public_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddressReply, Integer, Hash)>] AddressReply data, response status code and response headers
    def get_network_address_with_http_info(coin_type, public_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AddressApi.get_network_address ...'
      end
      # verify the required parameter 'coin_type' is set
      if @api_client.config.client_side_validation && coin_type.nil?
        fail ArgumentError, "Missing the required parameter 'coin_type' when calling AddressApi.get_network_address"
      end
      # verify enum value
      allowable_values = ["BITCOIN", "ETHEREUM", "TESTNET3", "BITCOIN_CASH", "BITCOIN_GOLD", "LITECOIN", "DASH", "DOGE", "BITCOIN_PRIVATE", "ZCASH", "ZCASH_TESTNET", "ZCLASSIC"]
      if @api_client.config.client_side_validation && !allowable_values.include?(coin_type)
        fail ArgumentError, "invalid value for \"coin_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'public_key' is set
      if @api_client.config.client_side_validation && public_key.nil?
        fail ArgumentError, "Missing the required parameter 'public_key' when calling AddressApi.get_network_address"
      end
      # resource path
      local_var_path = '/api/address/{coin_type}/{public_key}'.sub('{' + 'coin_type' + '}', CGI.escape(coin_type.to_s)).sub('{' + 'public_key' + '}', CGI.escape(public_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AddressReply' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AddressApi#get_network_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
